<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.prj.mapper.MemberMapper">

	<resultMap type="org.prj.domain.MemberVO" id="memberMap">
		<result property="m_idx" column="m_idx"/>
		<result property="id" column="id"/>
		<result property="password" column="password"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="level" column="level"/>
		<result property="nickname" column="nickname"/>
		<result property="reg_date" column="reg_date"/>
		<result property="status" column="status"/>
		<result property="point" column="point"/>
		<result property="bank" column="bank"/>
		<result property="bank_number" column="bank_number"/>
		<result property="with_amount" column="with_amount"/>
		<collection property="authList" resultMap="authMap"></collection>
	</resultMap>
	
	
	<resultMap type="org.prj.domain.AuthVO" id="authMap">
		<result property="id" column="id"/>
		<result property="auth" column="auth"/>
	</resultMap>
	
	<!-- 로그인 security -->
	<select id="memberRead" resultMap="memberMap">
		select m_idx, id, password, name, email, phone, nickname, point, reg_date, status, "LEVEL", bank, bank_number, with_amount, auth, naverid, kakaoid, token from member where id = #{id} and status = 'N'
	</select>
	
	<!-- 회원가입 -->
	<insert id="memberJoin" parameterType="org.prj.domain.MemberVO">
		insert into member 
		(
			M_IDX, 
			id, 
			password, 
			name, 
			email, 
			phone, 
			"LEVEL", 
			nickname, 
			REG_DATE, 
			UPDATE_DATE, 
			status, 
			point,
			token,
			kakaoid,
			naverid
		)
			values 
		(
			seq_member.nextval, 
			#{id}, 
			#{password}, 
			#{name}, 
			#{email}, 
			#{phone}, 
			'C', 
			#{nickname}, 
			sysdate, 
			sysdate, 
			'N', 
			'500',
			#{token},
			#{kakaoid},
			#{naverid, jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 아이디 중복 검사 -->
	<select id="idCheck" resultType="int">
		select count(*) from member where id = #{id} and status = 'N'
	</select>
	
	<!-- 닉네임 중복 검사 -->
	<select id="nicknameCheck" resultType="int">
		select count(*) from member where nickname = #{nickname} and status = 'N'
	</select>
	
	<!-- 이메일 중복 검사 -->
	<select id="emailCheck" resultType="int">
		select count(*) from member where email = #{email} and status = 'N'
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="findId" parameterType="String" resultType="String">
		select id from member where name = #{name} and email = #{email} and status = 'N'
	</select>	
	
	<!-- 비밀번호 찾기 (이메일, 아이디 일치) -->
	<select id="findPw" parameterType="String" resultType="org.prj.domain.MemberVO">
		select * from member where email = #{email} and id = #{id} and status = 'N'
	</select>
	
	<!-- 패스워드변경 -->
	<update id = "updatePw" parameterType="org.prj.domain.MemberVO">
		update member set password = #{password} where email = #{email} and id = #{id} and status = 'N'
	</update>
	
	<!-- 내 정보 수정 -->
	<update id="updateMypage" parameterType="org.prj.domain.MemberVO">
		update member set 
			password = #{password}, 
			email = #{email}, 
			phone =#{phone} 
		where id = #{id} and status = 'N'
	</update>
	
	<!--  파트너 신청  -->
	<update id="partnerApp" parameterType="org.prj.domain.MemberVO"> 
		update member set "LEVEL" = 'B', auth = 'ROLE_PARTNER', bank = #{bank}, bank_number = #{bank_number} where name = #{name} and phone = #{phone} 
	</update>
	
	<!--  파트너 정보수정  -->
	<update id="partnerModify" parameterType="org.prj.domain.MemberVO"> 
		update member set bank = #{bank}, bank_number = #{bank_number} where name = #{name} and phone = #{phone} 
	</update>
	
	<!--  파트너 정보조회  -->
	<select id="getPartnerinfo" parameterType="int" resultType="org.prj.domain.MemberVO"> 
		select * from member where m_idx = #{m_idx} 
		
	</select>
	
	<!-- 카카오 아이디 중복 조회 -->
	<select id="kakaoIdck" parameterType="String" resultType="int">
		select count(*) from member where kakaoid = #{kakaoid}
	</select>
	
	<!-- 카카오 로그인 -->
	<select id="kakaoRead" parameterType="String" resultMap="memberMap">
		select m_idx, id, password, name, email, phone, nickname, point, reg_date, status, "LEVEL", bank, bank_number, with_amount, auth, naverid, kakaoid, token from member where kakaoid = #{kakaoid} and status = 'N' 
	</select>
</mapper>	